---
// FAQ section with accordion functionality
import { getCollection } from 'astro:content';

export interface Props {
  class?: string;
  limit?: number;
  category?: string;
}

const {
  class: className = '',
  limit = 8,
  category,
} = Astro.props;

// Fetch FAQs from content collection
let faqs = await getCollection('faq');

if (category) {
  faqs = faqs.filter(faq => faq.data.category === category);
}

faqs = faqs
  .sort((a, b) => (a.data.order || 0) - (b.data.order || 0))
  .slice(0, limit);
---

<section class={`faq-section py-16 bg-gray-50 ${className}`}>
  <div class="container mx-auto px-4">
    <!-- Section Header -->
    <div class="text-center mb-12">
      <h2 class="text-3xl md:text-4xl font-bold text-gray-900 mb-4">
        Frequently Asked Questions
      </h2>
      <p class="text-lg text-gray-600 max-w-2xl mx-auto">
        Find answers to common questions about our locksmith services
      </p>
    </div>

    <!-- FAQ Accordion -->
    <div class="max-w-4xl mx-auto space-y-4">
      {faqs.map((faq, index) => (
        <div class="faq-item bg-white border border-gray-200 rounded-lg overflow-hidden">
          <button
            class="faq-question w-full flex items-center justify-between p-6 text-left hover:bg-gray-50 transition-colors"
            aria-expanded="false"
            aria-controls={`faq-answer-${index}`}
          >
            <span class="font-semibold text-lg text-gray-900 pr-4">
              {faq.data.question}
            </span>
            <svg
              class="faq-icon w-6 h-6 text-gray-600 flex-shrink-0 transition-transform duration-200"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
            </svg>
          </button>
          <div
            id={`faq-answer-${index}`}
            class="faq-answer hidden px-6 pb-6"
            role="region"
          >
            <div class="text-gray-700 leading-relaxed prose prose-sm max-w-none">
              {faq.body}
            </div>
          </div>
        </div>
      ))}
    </div>

    <!-- Still Have Questions CTA -->
    <div class="mt-12 text-center p-8 bg-white rounded-xl border border-gray-200">
      <h3 class="text-2xl font-bold text-gray-900 mb-3">
        Still have questions?
      </h3>
      <p class="text-gray-600 mb-6">
        Our team is here to help. Contact us and we'll answer any questions you have.
      </p>
      <div class="flex flex-wrap justify-center gap-4">
        <a
          href="tel:+18649009597"
          class="inline-flex items-center gap-2 px-6 py-3 bg-primary-600 text-white font-semibold rounded-lg hover:bg-primary-700 transition-colors"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z"></path>
          </svg>
          Call Us: (864) 900-9597
        </a>
        <a
          href="/contact"
          class="inline-flex items-center gap-2 px-6 py-3 border-2 border-gray-300 text-gray-700 font-semibold rounded-lg hover:border-gray-400 transition-colors"
        >
          Send a Message
        </a>
      </div>
    </div>
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const faqItems = document.querySelectorAll('.faq-item');

    faqItems.forEach((item) => {
      const question = item.querySelector('.faq-question') as HTMLButtonElement;
      const answer = item.querySelector('.faq-answer') as HTMLElement;
      const icon = item.querySelector('.faq-icon') as SVGElement;

      if (!question || !answer || !icon) return;

      question.addEventListener('click', () => {
        const isExpanded = question.getAttribute('aria-expanded') === 'true';

        // Close all other FAQ items
        faqItems.forEach((otherItem) => {
          if (otherItem !== item) {
            const otherQuestion = otherItem.querySelector('.faq-question') as HTMLButtonElement;
            const otherAnswer = otherItem.querySelector('.faq-answer') as HTMLElement;
            const otherIcon = otherItem.querySelector('.faq-icon') as SVGElement;

            if (otherQuestion && otherAnswer && otherIcon) {
              otherQuestion.setAttribute('aria-expanded', 'false');
              otherAnswer.classList.add('hidden');
              otherIcon.style.transform = 'rotate(0deg)';
            }
          }
        });

        // Toggle current item
        if (isExpanded) {
          question.setAttribute('aria-expanded', 'false');
          answer.classList.add('hidden');
          icon.style.transform = 'rotate(0deg)';
        } else {
          question.setAttribute('aria-expanded', 'true');
          answer.classList.remove('hidden');
          icon.style.transform = 'rotate(180deg)';
        }
      });
    });
  });
</script>

<style>
  .faq-answer {
    animation: slideDown 0.3s ease-out;
  }

  @keyframes slideDown {
    from {
      opacity: 0;
      max-height: 0;
    }
    to {
      opacity: 1;
      max-height: 500px;
    }
  }
</style>
