---
// Contact form with validation and reCAPTCHA
import Button from '../ui/Button.astro';

export interface Props {
  class?: string;
  showTitle?: boolean;
}

const {
  class: className = '',
  showTitle = true,
} = Astro.props;

const recaptchaSiteKey = import.meta.env.GOOGLE_RECAPTCHA_SITE_KEY || import.meta.env.PUBLIC_GOOGLE_RECAPTCHA_SITE_KEY;
---

<div class={`contact-form-container ${className}`}>
  {showTitle && (
    <div class="mb-6">
      <h3 class="text-2xl font-bold text-charcoal-900 mb-2">Send Us a Message</h3>
      <p class="text-charcoal-600">We'll respond within 24 hours</p>
    </div>
  )}

  <form id="contact-form" class="space-y-5">
    <div class="grid md:grid-cols-2 gap-4">
      <!-- Name -->
      <div>
        <label for="contact-name" class="block text-sm font-semibold text-charcoal-800 mb-2">
          Name <span class="text-gold-600">*</span>
        </label>
        <input
          type="text"
          id="contact-name"
          name="name"
          required
          class="w-full px-4 py-3 border-2 border-charcoal-200 rounded-lg focus:ring-2 focus:ring-gold-400 focus:border-gold-400 transition-colors duration-200 bg-white text-charcoal-900 placeholder-charcoal-400"
          placeholder="Your name"
        />
        <div class="error-message hidden text-gold-700 text-sm mt-1.5 font-medium" data-field="name"></div>
      </div>

      <!-- Phone -->
      <div>
        <label for="contact-phone" class="block text-sm font-semibold text-charcoal-800 mb-2">
          Phone <span class="text-charcoal-500 text-xs font-normal">(Optional)</span>
        </label>
        <input
          type="tel"
          id="contact-phone"
          name="phone"
          class="w-full px-4 py-3 border-2 border-charcoal-200 rounded-lg focus:ring-2 focus:ring-gold-400 focus:border-gold-400 transition-colors duration-200 bg-white text-charcoal-900 placeholder-charcoal-400"
          placeholder="(864) 555-0123"
        />
        <div class="error-message hidden text-gold-700 text-sm mt-1.5 font-medium" data-field="phone"></div>
      </div>
    </div>

    <!-- Email -->
    <div>
      <label for="contact-email" class="block text-sm font-semibold text-charcoal-800 mb-2">
        Email <span class="text-gold-600">*</span>
      </label>
      <input
        type="email"
        id="contact-email"
        name="email"
        required
        class="w-full px-4 py-3 border-2 border-charcoal-200 rounded-lg focus:ring-2 focus:ring-gold-400 focus:border-gold-400 transition-colors duration-200 bg-white text-charcoal-900 placeholder-charcoal-400"
        placeholder="your@email.com"
      />
      <div class="error-message hidden text-gold-700 text-sm mt-1.5 font-medium" data-field="email"></div>
    </div>

    <!-- Subject -->
    <div>
      <label for="contact-subject" class="block text-sm font-semibold text-charcoal-800 mb-2">
        Subject <span class="text-gold-600">*</span>
      </label>
      <input
        type="text"
        id="contact-subject"
        name="subject"
        required
        class="w-full px-4 py-3 border-2 border-charcoal-200 rounded-lg focus:ring-2 focus:ring-gold-400 focus:border-gold-400 transition-colors duration-200 bg-white text-charcoal-900 placeholder-charcoal-400"
        placeholder="How can we help?"
      />
      <div class="error-message hidden text-gold-700 text-sm mt-1.5 font-medium" data-field="subject"></div>
    </div>

    <!-- Message -->
    <div>
      <label for="contact-message" class="block text-sm font-semibold text-charcoal-800 mb-2">
        Message <span class="text-gold-600">*</span>
      </label>
      <textarea
        id="contact-message"
        name="message"
        required
        rows="5"
        class="w-full px-4 py-3 border-2 border-charcoal-200 rounded-lg focus:ring-2 focus:ring-gold-400 focus:border-gold-400 transition-colors duration-200 bg-white text-charcoal-900 placeholder-charcoal-400 resize-none"
        placeholder="Tell us more about your needs..."
      ></textarea>
      <div class="error-message hidden text-gold-700 text-sm mt-1.5 font-medium" data-field="message"></div>
    </div>

    <!-- Honeypot -->
    <input type="text" name="website" class="hidden" tabindex="-1" autocomplete="off" />

    <!-- reCAPTCHA Badge Info -->
    {recaptchaSiteKey && (
      <div class="text-xs text-charcoal-500 text-center">
        This site is protected by reCAPTCHA and the Google{' '}
        <a href="https://policies.google.com/privacy" target="_blank" rel="noopener noreferrer" class="text-gold-600 hover:text-gold-700 underline">Privacy Policy</a> and{' '}
        <a href="https://policies.google.com/terms" target="_blank" rel="noopener noreferrer" class="text-gold-600 hover:text-gold-700 underline">Terms of Service</a> apply.
      </div>
    )}

    <!-- Submit Button -->
    <Button
      type="submit"
      variant="primary"
      size="lg"
      fullWidth={true}
      class="contact-submit-btn bg-gold-400 hover:bg-gold-500 text-charcoal-900 font-bold shadow-lg hover:shadow-xl transition-all duration-200"
    >
      <span class="btn-text">Send Message</span>
      <span class="btn-loading hidden">Sending...</span>
    </Button>

    <!-- Success Message -->
    <div id="contact-success" class="hidden p-4 bg-gold-50 border-l-4 border-gold-500 rounded-lg animate-fade-in">
      <div class="flex items-start">
        <svg class="w-6 h-6 text-gold-600 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
        </svg>
        <div>
          <h4 class="font-bold text-charcoal-900">Message Sent!</h4>
          <p class="text-charcoal-700 text-sm mt-1">
            Thank you for contacting us. We'll respond within 24 hours.
          </p>
        </div>
      </div>
    </div>

    <!-- Error Message -->
    <div id="contact-error" class="hidden p-4 bg-gold-50 border-l-4 border-gold-600 rounded-lg animate-fade-in">
      <div class="flex items-start">
        <svg class="w-6 h-6 text-gold-700 mr-3 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
        </svg>
        <div>
          <h4 class="font-bold text-charcoal-900">Submission Failed</h4>
          <p class="text-charcoal-700 text-sm mt-1" id="contact-error-message">
            Please try again or call us at (864) 900-9597
          </p>
        </div>
      </div>
    </div>
  </form>
</div>

<script>
  import { submitContactForm, validateForm, handleFormError, trackFormSuccess } from '../../lib/api/client';

  // Load reCAPTCHA script
  const recaptchaSiteKey = import.meta.env.GOOGLE_RECAPTCHA_SITE_KEY || import.meta.env.PUBLIC_GOOGLE_RECAPTCHA_SITE_KEY;
  if (recaptchaSiteKey && typeof window !== 'undefined') {
    const script = document.createElement('script');
    script.src = `https://www.google.com/recaptcha/api.js?render=${recaptchaSiteKey}`;
    script.async = true;
    script.defer = true;
    document.head.appendChild(script);
  }

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    if (!form) return;

    const submitBtn = form.querySelector('.contact-submit-btn') as HTMLButtonElement;
    const btnText = submitBtn?.querySelector('.btn-text');
    const btnLoading = submitBtn?.querySelector('.btn-loading');
    const successMessage = document.getElementById('contact-success');
    const errorMessage = document.getElementById('contact-error');
    const errorMessageText = document.getElementById('contact-error-message');

    const clearErrors = () => {
      form.querySelectorAll('.error-message').forEach((el) => el.classList.add('hidden'));
      form.querySelectorAll('input, textarea').forEach((el) => {
        el.classList.remove('border-gold-600', 'border-gold-700');
        el.classList.add('border-charcoal-200');
      });
      errorMessage?.classList.add('hidden');
    };

    const showFieldError = (field: string, message: string) => {
      const errorEl = form.querySelector(`.error-message[data-field="${field}"]`);
      const inputEl = form.querySelector(`[name="${field}"]`) as HTMLElement;
      if (errorEl && inputEl) {
        errorEl.textContent = message;
        errorEl.classList.remove('hidden');
        inputEl.classList.remove('border-charcoal-200');
        inputEl.classList.add('border-gold-600');
      }
    };

    const clearFieldError = (field: string) => {
      const errorEl = form.querySelector(`.error-message[data-field="${field}"]`);
      const inputEl = form.querySelector(`[name="${field}"]`) as HTMLElement;
      if (errorEl && inputEl) {
        errorEl.classList.add('hidden');
        inputEl.classList.remove('border-gold-600', 'border-gold-700');
        inputEl.classList.add('border-charcoal-200');
      }
    };

    // Real-time validation
    const validateField = (field: string, value: string) => {
      let error: string | null = null;

      switch (field) {
        case 'name':
          error = validateForm.name(value);
          break;
        case 'email':
          error = validateForm.email(value);
          break;
        case 'phone':
          if (value.trim()) {
            error = validateForm.phone(value);
          }
          break;
        case 'subject':
          if (value.trim().length > 0 && value.trim().length < 5) {
            error = 'Subject must be at least 5 characters';
          }
          break;
        case 'message':
          error = validateForm.message(value, 10);
          break;
      }

      if (error) {
        showFieldError(field, error);
      } else {
        clearFieldError(field);
      }

      return !error;
    };

    // Add real-time validation listeners
    ['name', 'email', 'phone', 'subject', 'message'].forEach((fieldName) => {
      const field = form.querySelector(`[name="${fieldName}"]`) as HTMLInputElement | HTMLTextAreaElement;
      if (field) {
        // Validate on blur
        field.addEventListener('blur', () => {
          if (field.value.trim()) {
            validateField(fieldName, field.value);
          }
        });

        // Clear error on input
        field.addEventListener('input', () => {
          if (field.classList.contains('border-gold-600')) {
            validateField(fieldName, field.value);
          }
        });
      }
    });

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      clearErrors();

      const honeypot = (form.querySelector('[name="website"]') as HTMLInputElement)?.value;
      if (honeypot) return;

      const formData = new FormData(form);
      const data = {
        name: formData.get('name') as string,
        email: formData.get('email') as string,
        phone: (formData.get('phone') as string) || undefined,
        subject: formData.get('subject') as string,
        message: formData.get('message') as string,
      };

      // Validate all fields
      let isValid = true;
      const validations = [
        ['name', validateForm.name(data.name)],
        ['email', validateForm.email(data.email)],
        ['phone', data.phone ? validateForm.phone(data.phone) : null],
        ['subject', data.subject.trim().length < 5 ? 'Subject must be at least 5 characters' : null],
        ['message', validateForm.message(data.message, 10)],
      ] as const;

      validations.forEach(([field, error]) => {
        if (error) {
          showFieldError(field, error);
          isValid = false;
        }
      });

      if (!isValid) return;

      // Get reCAPTCHA token
      let recaptchaToken: string | undefined;
      if (recaptchaSiteKey && typeof (window as any).grecaptcha !== 'undefined') {
        try {
          recaptchaToken = await (window as any).grecaptcha.execute(recaptchaSiteKey, { action: 'contact' });
        } catch (error) {
          console.error('reCAPTCHA error:', error);
        }
      }

      // Submit
      if (submitBtn && btnText && btnLoading) {
        submitBtn.disabled = true;
        btnText.classList.add('hidden');
        btnLoading.classList.remove('hidden');
      }

      try {
        const response = await submitContactForm({
          ...data,
          recaptchaToken,
        });

        if (response.success) {
          successMessage?.classList.remove('hidden');
          form.reset();
          trackFormSuccess('contact');
          successMessage?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else {
          throw new Error(response.error?.message || 'Submission failed');
        }
      } catch (error) {
        const errorMsg = handleFormError(error);
        if (errorMessageText) errorMessageText.textContent = errorMsg;
        errorMessage?.classList.remove('hidden');
        errorMessage?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      } finally {
        if (submitBtn && btnText && btnLoading) {
          submitBtn.disabled = false;
          btnText.classList.remove('hidden');
          btnLoading.classList.add('hidden');
        }
      }
    });
  });
</script>
