---
// Contact form with validation
import Button from '../ui/Button.astro';

export interface Props {
  class?: string;
  showTitle?: boolean;
}

const {
  class: className = '',
  showTitle = true,
} = Astro.props;
---

<div class={`contact-form-container ${className}`}>
  {showTitle && (
    <div class="mb-6">
      <h3 class="text-2xl font-bold text-gray-900 mb-2">Send Us a Message</h3>
      <p class="text-gray-600">We'll respond within 24 hours</p>
    </div>
  )}

  <form id="contact-form" class="space-y-4">
    <div class="grid md:grid-cols-2 gap-4">
      <!-- Name -->
      <div>
        <label for="contact-name" class="block text-sm font-semibold text-gray-700 mb-2">
          Name <span class="text-red-600">*</span>
        </label>
        <input
          type="text"
          id="contact-name"
          name="name"
          required
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          placeholder="Your name"
        />
        <div class="error-message hidden text-red-600 text-sm mt-1" data-field="name"></div>
      </div>

      <!-- Phone -->
      <div>
        <label for="contact-phone" class="block text-sm font-semibold text-gray-700 mb-2">
          Phone <span class="text-gray-500 text-xs">(Optional)</span>
        </label>
        <input
          type="tel"
          id="contact-phone"
          name="phone"
          class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
          placeholder="(864) 555-0123"
        />
        <div class="error-message hidden text-red-600 text-sm mt-1" data-field="phone"></div>
      </div>
    </div>

    <!-- Email -->
    <div>
      <label for="contact-email" class="block text-sm font-semibold text-gray-700 mb-2">
        Email <span class="text-red-600">*</span>
      </label>
      <input
        type="email"
        id="contact-email"
        name="email"
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
        placeholder="your@email.com"
      />
      <div class="error-message hidden text-red-600 text-sm mt-1" data-field="email"></div>
    </div>

    <!-- Subject -->
    <div>
      <label for="contact-subject" class="block text-sm font-semibold text-gray-700 mb-2">
        Subject <span class="text-red-600">*</span>
      </label>
      <input
        type="text"
        id="contact-subject"
        name="subject"
        required
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
        placeholder="How can we help?"
      />
      <div class="error-message hidden text-red-600 text-sm mt-1" data-field="subject"></div>
    </div>

    <!-- Message -->
    <div>
      <label for="contact-message" class="block text-sm font-semibold text-gray-700 mb-2">
        Message <span class="text-red-600">*</span>
      </label>
      <textarea
        id="contact-message"
        name="message"
        required
        rows="5"
        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 resize-none"
        placeholder="Tell us more about your needs..."
      ></textarea>
      <div class="error-message hidden text-red-600 text-sm mt-1" data-field="message"></div>
    </div>

    <!-- Honeypot -->
    <input type="text" name="website" class="hidden" tabindex="-1" autocomplete="off" />

    <!-- Submit Button -->
    <Button
      type="submit"
      variant="primary"
      size="lg"
      fullWidth={true}
      class="contact-submit-btn"
    >
      <span class="btn-text">Send Message</span>
      <span class="btn-loading hidden">Sending...</span>
    </Button>

    <!-- Success Message -->
    <div id="contact-success" class="hidden p-4 bg-green-50 border-l-4 border-green-500 rounded-lg">
      <div class="flex items-start">
        <span class="text-2xl mr-3">✓</span>
        <div>
          <h4 class="font-bold text-green-900">Message Sent!</h4>
          <p class="text-green-700 text-sm mt-1">
            Thank you for contacting us. We'll respond within 24 hours.
          </p>
        </div>
      </div>
    </div>

    <!-- Error Message -->
    <div id="contact-error" class="hidden p-4 bg-red-50 border-l-4 border-red-500 rounded-lg">
      <div class="flex items-start">
        <span class="text-2xl mr-3">✕</span>
        <div>
          <h4 class="font-bold text-red-900">Submission Failed</h4>
          <p class="text-red-700 text-sm mt-1" id="contact-error-message">
            Please try again or email us at keykingslocksmithsc@gmail.com
          </p>
        </div>
      </div>
    </div>
  </form>
</div>

<script>
  import { submitContactForm, validateForm, handleFormError, trackFormSuccess } from '../../lib/api/client';

  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('contact-form') as HTMLFormElement;
    if (!form) return;

    const submitBtn = form.querySelector('.contact-submit-btn') as HTMLButtonElement;
    const btnText = submitBtn?.querySelector('.btn-text');
    const btnLoading = submitBtn?.querySelector('.btn-loading');
    const successMessage = document.getElementById('contact-success');
    const errorMessage = document.getElementById('contact-error');
    const errorMessageText = document.getElementById('contact-error-message');

    const clearErrors = () => {
      form.querySelectorAll('.error-message').forEach((el) => el.classList.add('hidden'));
      form.querySelectorAll('input, textarea').forEach((el) => el.classList.remove('border-red-500'));
      errorMessage?.classList.add('hidden');
    };

    const showFieldError = (field: string, message: string) => {
      const errorEl = form.querySelector(`.error-message[data-field="${field}"]`);
      const inputEl = form.querySelector(`[name="${field}"]`);
      if (errorEl && inputEl) {
        errorEl.textContent = message;
        errorEl.classList.remove('hidden');
        inputEl.classList.add('border-red-500');
      }
    };

    form.addEventListener('submit', async (e) => {
      e.preventDefault();
      clearErrors();

      const honeypot = (form.querySelector('[name="website"]') as HTMLInputElement)?.value;
      if (honeypot) return;

      const formData = new FormData(form);
      const data = {
        name: formData.get('name') as string,
        email: formData.get('email') as string,
        phone: (formData.get('phone') as string) || undefined,
        subject: formData.get('subject') as string,
        message: formData.get('message') as string,
      };

      // Validate
      let isValid = true;
      const validations = [
        ['name', validateForm.name(data.name)],
        ['email', validateForm.email(data.email)],
        ['phone', data.phone ? validateForm.phone(data.phone) : null],
        ['subject', data.subject.trim().length < 5 ? 'Subject must be at least 5 characters' : null],
        ['message', validateForm.message(data.message, 10)],
      ] as const;

      validations.forEach(([field, error]) => {
        if (error) {
          showFieldError(field, error);
          isValid = false;
        }
      });

      if (!isValid) return;

      // Submit
      if (submitBtn && btnText && btnLoading) {
        submitBtn.disabled = true;
        btnText.classList.add('hidden');
        btnLoading.classList.remove('hidden');
      }

      try {
        const response = await submitContactForm(data);

        if (response.success) {
          successMessage?.classList.remove('hidden');
          form.reset();
          trackFormSuccess('contact');
          successMessage?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else {
          throw new Error(response.error?.message || 'Submission failed');
        }
      } catch (error) {
        const errorMsg = handleFormError(error);
        if (errorMessageText) errorMessageText.textContent = errorMsg;
        errorMessage?.classList.remove('hidden');
      } finally {
        if (submitBtn && btnText && btnLoading) {
          submitBtn.disabled = false;
          btnText.classList.remove('hidden');
          btnLoading.classList.add('hidden');
        }
      }
    });
  });
</script>
