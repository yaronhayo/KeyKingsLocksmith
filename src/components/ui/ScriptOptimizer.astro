---
/**
 * ScriptOptimizer Component
 * Optimizes script loading with various strategies
 */

interface Props {
  src: string;
  strategy?: 'eager' | 'idle' | 'interaction' | 'visible';
  type?: string;
  async?: boolean;
  defer?: boolean;
  targetSelector?: string; // For 'visible' strategy
}

const {
  src,
  strategy = 'idle',
  type = 'text/javascript',
  async = true,
  defer = false,
  targetSelector,
} = Astro.props;

const scriptId = `script-${src.replace(/[^a-zA-Z0-9]/g, '-')}`;
---

{strategy === 'eager' && (
  <script src={src} type={type} async={async} defer={defer}></script>
)}

{strategy === 'idle' && (
  <script type="module" define:vars={{ src, type }}>
    if ('requestIdleCallback' in window) {
      requestIdleCallback(() => {
        const script = document.createElement('script');
        script.src = src;
        script.type = type;
        script.async = true;
        document.head.appendChild(script);
      });
    } else {
      setTimeout(() => {
        const script = document.createElement('script');
        script.src = src;
        script.type = type;
        script.async = true;
        document.head.appendChild(script);
      }, 1000);
    }
  </script>
)}

{strategy === 'interaction' && (
  <script type="module" define:vars={{ src, type }}>
    const events = ['mousedown', 'touchstart', 'keydown', 'scroll'];
    
    const loadScript = () => {
      const script = document.createElement('script');
      script.src = src;
      script.type = type;
      script.async = true;
      document.head.appendChild(script);
      
      events.forEach(event => {
        document.removeEventListener(event, loadScript);
      });
    };

    events.forEach(event => {
      document.addEventListener(event, loadScript, { once: true, passive: true });
    });
  </script>
)}

{strategy === 'visible' && targetSelector && (
  <script type="module" define:vars={{ src, type, targetSelector }}>
    const target = document.querySelector(targetSelector);
    
    if (target) {
      const observer = new IntersectionObserver(
        (entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              const script = document.createElement('script');
              script.src = src;
              script.type = type;
              script.async = true;
              document.head.appendChild(script);
              observer.disconnect();
            }
          });
        },
        { rootMargin: '50px' }
      );

      observer.observe(target);
    }
  </script>
)}
